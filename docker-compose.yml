version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: burnafterit-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: burnafterit
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - burnafterit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Minio S3-compatible storage
  # Remove the profiles line below to enable Minio
  minio:
    image: minio/minio:latest
    container_name: burnafterit-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - burnafterit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["minio"]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: burnafterit-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=burnafterit
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION}
      - S3_USE_SSL=${S3_USE_SSL}
      - S3_SIGNATURE_VERSION=${S3_SIGNATURE_VERSION}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://frontend
    volumes:
      - ./backend:/app
    restart: unless-stopped
    networks:
      - burnafterit-network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
        required: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/utils/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: burnafterit-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://localhost:5000
      - VITE_APP_URL=http://localhost:3000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - burnafterit-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  burnafterit-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
